import { ConfigModule as AiofixConfigModule } from "@aiofix/config";
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { SharedModule } from './shared/shared.module';
import { IamModule } from './iam/iam.module';

/**
 * @class AppModule
 * @description
 * 应用的根模块，负责组织和配置整个应用的所有模块。
 * 
 * 主要原理与机制如下：
 * 1. 使用@Module装饰器定义模块，通过imports导入其他模块，
 *    通过controllers和providers注册控制器和服务。
 * 2. ConfigModule.forRoot()用于加载环境变量配置，支持.env文件。
 * 3. 模块化的设计使得应用具有良好的可维护性和可扩展性。
 * 
 * 功能与业务规则：
 * 1. 配置全局模块
 * 2. 注册根控制器和服务
 * 3. 导入共享模块
 * 4. 配置环境变量
 */
@Module({
    imports: [
        // 配置模块 - 加载环境变量
        ConfigModule.forRoot({
            isGlobal: true,
            envFilePath: ['.env.local', '.env'],
        }),
        // 共享模块
        SharedModule,
        // IAM模块
        IamModule,
        // TODO: 导入其他模块
        // NotificationModule,
        // WorkflowModule,
        // AnalyticsModule,
        // ImageManagementModule,
        // DocumentManagementModule,
        // CacheManagementModule,
        // SecurityComplianceModule,
        // MonitoringOperationsModule,
        // ApiIntegrationModule,
        // LlmManagementModule,
    ],
    controllers: [AppController],
    providers: [AppService],
})
export class AppModule { }
